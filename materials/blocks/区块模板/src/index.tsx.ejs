import Uploader from '@/components/Uploader';
import { processFileUrl } from '@/utils/url';
import { Form, Input, message, Modal, Select } from 'antd';
import React from 'react';
<% if (includeContext) { %>
import useContext from './useContext';
<% } %>
import useController from './useController';
<% if (includeStyle) { %>
import './index.less'
<% } %>

<% if (dialog || props) { %>
interface IProps {
  visible: boolean;
  onCancel: () => void;
  onOk: () => void;
}
<% } %>

const <%= name || 'LogicContainer' %><% if (dialog || props) { %>: React.FC<IProps> <% } %>= (<% if (dialog || props) { %>{ visible, onCancel, onOk }<% } %>) => {
  <% if (includeContext) { %>
  const context = useContext();
  <% } %>
  const controller = useController();
  <% if (includeService) { %>
  const { service } = controller;
  const { model } = service;
  <% } %>
  <% if (!includeService) { %>
  const { model } = controller;
  <% } %>

  return (
    <% if (!dialog) { %><div className="<%= className %>"><% } %>
		<% if (dialog) { %>
		<Modal
		  visible={visible}
		  title=""
		  wrapClassName="<%= className %>"
		  okButtonProps={{
			disabled: model.loading.submit,
			loading: model.loading.submit,
		  }}
		>
		<% } %>
		  <% if ( form.length ) { %>
		  <Form layout="vertical">
			<% form.map(item => { %>
			<% if(item.type === "Input"){ %>
			<Form.Item
			  label="<%= item.label %>"
			  <% if(item.required){ %>required<% } %>
			  validateStatus={
				model.validInfo.<%= item.name %>.valid ? undefined : 'error'
			  }
			  help={
				model.validInfo.<%= item.name %>.valid
				  ? undefined
				  : model.validInfo.<%= item.name %>.help
			  }
			>
			  <Input
				value={model.formData.<%= item.name %>}
				placeholder="<%= item.placeholder %>"
				maxLength={<%= item.maxLength %>}
				<% if(item.count){ %>
				suffix={
				  <span style={{ color: 'rgba(0, 0, 0, 0.25)' }}>
					{model.formData.<%= item.name %>?.length || 0}/10
				  </span>
				}
				<% } %>
				onChange={e => {
				  const { value } = e.target;
				  model.setFormData(s => {
					s.<%= item.name %> = value;
				  });
				  model.setValidInfo(s => {
					s.<%= item.name %>.valid = true;
				  });
				}}
			  />
			  <% if(item.help){ %><div className="form-item-help"><%= item.help %></div><% } %>
			</Form.Item>
			<% } %>
			<% if(item.type === "Uploader"){ %>
			<Form.Item
			  label="<%= item.label %>"
			  <% if(item.required){ %>required<% } %>
			  validateStatus={
				model.validInfo.<%= item.name %>.valid ? undefined : 'error'
			  }
			  help={
				model.validInfo.<%= item.name %>.valid
				  ? undefined
				  : model.validInfo.<%= item.name %>.help
			  }
			>
			  <div style={{ display: 'flex' }}>
				<div>
				  <Uploader
					listType="picture-card"
					fileList={
					  model.formData.<%= item.name %>
						? [
							{
							  url: processFileUrl(model.formData.<%= item.name %>),
							  thumbUrl: processFileUrl(model.formData.<%= item.name %>),
							  fileKey: processFileUrl(model.formData.<%= item.name %>),
							},
						  ]
						: []
					}
					onChange={(action, file, files) => {
					  if (action === 'add') {
						model.setFormData(s => {
						  s.<%= item.name %> = processFileUrl(file.fileKey);
						});
						model.setValidInfo(s => {
						  s.<%= item.name %>.valid = true;
						});
					  }
					}}
					useCheck
					checkOptions={{ width: 90, height: 90, maxSizeMB: 1 }}
					accept="image/png, .png"
					showUploadList={false}
					onError={() => {
					  message.error('图片上传失败');
					}}
				  />
				</div>
				<div>
				  <div style={{ fontSize: '12px', color: 'rgba(0, 0, 0, 0.25)' }}>
					建议使用90*90，1M以内的PNG图片
				  </div>
				</div>
			  </div>
			  <% if(item.help){ %><div className="form-item-help"><%= item.help %></div><% } %>
			</Form.Item>
			<% } %>
			<% if(item.type === "TextArea"){ %>
			<Form.Item
			  label="<%= item.label %>"
			  <% if(item.required){ %>required<% } %>
			  validateStatus={
				model.validInfo.<%= item.name %>.valid ? undefined : 'error'
			  }
			  help={
				model.validInfo.<%= item.name %>.valid
				  ? undefined
				  : model.validInfo.<%= item.name %>.help
			  }
			>
			  <Form.Item>
				<Input.TextArea
				  maxLength={<%= item.maxLength %>}
				  value={model.formData.<%= item.name %>}
				  placeholder="<%= item.placeholder %>"
				  rows={4}
				  style={{ resize: 'none' }}
				  onChange={e => {
					const { value } = e.target;
					model.setFormData(s => {
					  s.<%= item.name %> = value;
					});
					model.setValidInfo(s => {
					  s.<%= item.name %>.valid = true;
					});
				  }}
				/>
			  </Form.Item>
			  <% if(item.count){ %>
			  <span className="textarea-count">
				{model.formData.<%= item.name %>?.length || 0}/50
			  </span>
			  <% } %>
			  <% if(item.help){ %>
			  <div
				className="form-item-help"
				style={{ position: 'absolute', bottom: '0px' }}
			  >
			    <%= item.help %>
			  </div>
			  <% } %>
			</Form.Item>
			<% } %>
			<% if(item.type === "Select"){ %>
			<Form.Item
			  label="<%= item.label %>"
			  <% if(item.required){ %>required<% } %>
			  validateStatus={
				model.validInfo.<%= item.name %>.valid ? undefined : 'error'
			  }
			  help={
				model.validInfo.<%= item.name %>.valid
				  ? undefined
				  : model.validInfo.<%= item.name %>.help
			  }
			>
			  <Select
				placeholder="<%= item.placeholder %>"
				showSearch
				allowClear
				filterOption={false}
				value={model.formData.<%= item.name %>}
				onChange={value => {
				  model.setFormData(s => {
					s.<%= item.name %> = value;
				  });
				  model.setValidInfo(s => {
					s.<%= item.name %>.valid = true;
				  });
				}}
				showArrow={false}
			  >
				{model.options.<%= item.name %>.map(s => {
				  return (
					<Select.Option value={s.value} key={s.value}>
					  {s.label}
					</Select.Option>
				  );
				})}
			  </Select>
			  <% if(item.help){ %><div className="form-item-help"><%= item.help %></div><% } %>
			</Form.Item>
			<% } %>
			<% }) %>
		  </Form>
		  <% } %>
		<% if (dialog) { %>
		</Modal>
		<% } %>
		<% if (!dialog) { %></div><% } %>
  );
};

export default <%= name || 'LogicContainer' %>;
